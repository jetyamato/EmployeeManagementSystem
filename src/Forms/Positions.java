/*
 * The MIT License
 *
 * Copyright 2023 JOSEPH EMMANUEL F. TAMAYO.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package Forms;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.WindowConstants;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import EmployeeManagementSystem.DependencyInjector;
import java.awt.Color;
import javax.swing.table.JTableHeader;

/**
 *
 * @author josep
 */
public final class Positions extends JInternalFrame {

  private final DependencyInjector di = DependencyInjector.getInstance();
  private ArrayList<Data.Objects.Positions> positionsList = di.positionsFacade().getPositionsList();
  private boolean inEditMode = false;
  private Data.Objects.Positions positionToEdit;
  
  /**
   * Creates new form Positions
   */
  public Positions() {
    initComponents();
    refreshTableContents();
    
    jTable1.getSelectionModel().addListSelectionListener((ListSelectionEvent evt) -> {
      jTable1ValueChanged(evt);
    });
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new JScrollPane();
    jTable1 = new JTable();
    jLabel1 = new JLabel();
    txtPosition = new JTextField();
    btnAddOrEdit = new JButton();
    btnSave = new JButton();
    btnExit = new JButton();
    btnDelete = new JButton();
    btnCancel = new JButton();
    lblCount = new JLabel();

    setClosable(true);
    setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    setIconifiable(true);
    setTitle("Positions");
    setVisible(true);
    addInternalFrameListener(new InternalFrameListener() {
      public void internalFrameActivated(InternalFrameEvent evt) {
      }
      public void internalFrameClosed(InternalFrameEvent evt) {
      }
      public void internalFrameClosing(InternalFrameEvent evt) {
        formInternalFrameClosing(evt);
      }
      public void internalFrameDeactivated(InternalFrameEvent evt) {
      }
      public void internalFrameDeiconified(InternalFrameEvent evt) {
        formInternalFrameDeiconified(evt);
      }
      public void internalFrameIconified(InternalFrameEvent evt) {
      }
      public void internalFrameOpened(InternalFrameEvent evt) {
      }
    });

    jTable1.setModel(new DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "ID", "Position"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(jTable1);

    jLabel1.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
    jLabel1.setText("Position:");

    txtPosition.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
    txtPosition.setEnabled(false);

    btnAddOrEdit.setIcon(new ImageIcon(getClass().getResource("/Resources/add.png"))); // NOI18N
    btnAddOrEdit.setText("  Add");
    btnAddOrEdit.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        btnAddOrEditActionPerformed(evt);
      }
    });

    btnSave.setIcon(new ImageIcon(getClass().getResource("/Resources/diskette.png"))); // NOI18N
    btnSave.setText("  Save");
    btnSave.setEnabled(false);
    btnSave.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        btnSaveActionPerformed(evt);
      }
    });

    btnExit.setIcon(new ImageIcon(getClass().getResource("/Resources/exit.png"))); // NOI18N
    btnExit.setText("  Exit");
    btnExit.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        btnExitActionPerformed(evt);
      }
    });

    btnDelete.setIcon(new ImageIcon(getClass().getResource("/Resources/delete.png"))); // NOI18N
    btnDelete.setText("  Delete");
    btnDelete.setEnabled(false);
    btnDelete.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        btnDeleteActionPerformed(evt);
      }
    });

    btnCancel.setIcon(new ImageIcon(getClass().getResource("/Resources/close.png"))); // NOI18N
    btnCancel.setText("  Cancel");
    btnCancel.setEnabled(false);
    btnCancel.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        btnCancelActionPerformed(evt);
      }
    });

    lblCount.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
    lblCount.setText("Records Found: 0");

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(21, 21, 21)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
              .addComponent(lblCount, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtPosition)))
            .addGap(325, 325, 325))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 640, GroupLayout.PREFERRED_SIZE)
              .addGroup(layout.createSequentialGroup()
                .addComponent(btnAddOrEdit)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(18, 18, 18)
                .addComponent(btnExit)))
            .addContainerGap(21, Short.MAX_VALUE))))
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(21, 21, 21)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(txtPosition, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(btnAddOrEdit)
          .addComponent(btnSave)
          .addComponent(btnDelete)
          .addComponent(btnCancel)
          .addComponent(btnExit))
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(lblCount)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 187, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(21, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void formInternalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeiconified
    
    Dimension desktopSize = this.getParent().getSize();
    Dimension internalFrameSize = this.getSize();

    this.setLocation(
      (desktopSize.width - internalFrameSize.width) / 2,
      (desktopSize.height - internalFrameSize.height) / 2
    );
  }//GEN-LAST:event_formInternalFrameDeiconified

  private void btnAddOrEditActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddOrEditActionPerformed
    if (btnAddOrEdit.getText().trim().equalsIgnoreCase("add")) {
      txtPosition.setEnabled(true);
      btnAddOrEdit.setEnabled(false);
      btnSave.setEnabled(true);
      btnDelete.setEnabled(false);
      btnCancel.setEnabled(true);
      jTable1.setEnabled(false);
    } else {
      DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
      int selectedId = (int) model.getValueAt(jTable1.getSelectedRow(), 0);
      Data.Objects.Positions i = null;

      for (Data.Objects.Positions p : this.positionsList) {
        if (p.getId() == selectedId) {
          i = p;
          break;
        }
      }

      positionToEdit = i;

      if (positionToEdit != null) {
        inEditMode = true;
        
        txtPosition.setText(positionToEdit.getPositionName());
        txtPosition.setEnabled(true);
        btnAddOrEdit.setEnabled(false);
        btnSave.setEnabled(true);
        btnDelete.setEnabled(false);
        btnCancel.setEnabled(true);
        jTable1.setEnabled(false);
      }
    }
  }//GEN-LAST:event_btnAddOrEditActionPerformed

  private void btnCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
    resetTheForm();
    refreshTableContents();
  }//GEN-LAST:event_btnCancelActionPerformed

  private void btnExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    resetTheForm();
    refreshTableContents();
    setVisible(false);
  }//GEN-LAST:event_btnExitActionPerformed

  private void btnSaveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
    // Validation check
    
    String positionName = txtPosition.getText();
    
    if (positionName.isBlank()) JOptionPane.showMessageDialog(this, "Position is missing.", "Add", JOptionPane.ERROR_MESSAGE);
    else {
      if (inEditMode) {
        positionToEdit.setPositionName(positionName);
        
        for (Data.Objects.Positions p : this.positionsList) {
          if (p.getId() == positionToEdit.getId()) {
            p.setPositionName(positionToEdit.getPositionName());
            break;
          }
        }
        
        di.positionsFacade().save(positionToEdit, false);
        
      } else {
        Data.Objects.Positions newPosition = new Data.Objects.Positions(
          positionsList.size() + 1,
          positionName
        );

        positionsList.add(newPosition);
        
        di.positionsFacade().save(newPosition, true);
      }
      
      resetTheForm();
      refreshTableContents();
      
      JOptionPane.showMessageDialog(this, inEditMode ? "Position edited successfully." : "Position added successfully.", inEditMode ? "Edit" : "Add", JOptionPane.INFORMATION_MESSAGE);
    }
  }//GEN-LAST:event_btnSaveActionPerformed

  private void btnDeleteActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?", "Delete", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
    
    if (choice == JOptionPane.YES_OPTION) {
      DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
      int selectedId = (int) model.getValueAt(jTable1.getSelectedRow(), 0);
      Data.Objects.Positions positionToDelete = null;
      
      for (Data.Objects.Positions p : this.positionsList) {
        if (p.getId() == selectedId) {
          positionToDelete = p;
          break;
        }
      }
        
      di.positionsFacade().delete(positionToDelete);

      resetTheForm();
      refreshTableContents();
      
      JOptionPane.showMessageDialog(this, "Position Deleted Successfully.", "Delete", JOptionPane.INFORMATION_MESSAGE);
    }
  }//GEN-LAST:event_btnDeleteActionPerformed

  private void formInternalFrameClosing(InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
    resetTheForm();
    refreshTableContents();
  }//GEN-LAST:event_formInternalFrameClosing


  // Variables declaration - do not modify//GEN-BEGIN:variables
  JButton btnAddOrEdit;
  JButton btnCancel;
  JButton btnDelete;
  JButton btnExit;
  JButton btnSave;
  JLabel jLabel1;
  JScrollPane jScrollPane1;
  JTable jTable1;
  JLabel lblCount;
  JTextField txtPosition;
  // End of variables declaration//GEN-END:variables

  private void refreshData() {
    positionsList = di.positionsFacade().getPositionsList();
  }
  
  private void refreshTableContents() {
    refreshData();
    
    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
    
    model.setRowCount(0);
    
    int count = 0;
    
    for (Data.Objects.Positions p : this.positionsList) {
      model.addRow(
        new Object[] {
          p.getId(),
          p.getPositionName()
        }
      );
      ++count;
    }
    
    lblCount.setText("Records Found: " + count);
    
    adjustColumnWidths();
  }
  
  private void jTable1ValueChanged(ListSelectionEvent evt) {
    if (jTable1.getSelectionModel().isSelectionEmpty()) {
      btnAddOrEdit.setIcon(new ImageIcon(getClass().getResource("/Resources/add.png"))); // NOI18N
      btnAddOrEdit.setText("  Add");
      btnAddOrEdit.setEnabled(true);
      btnCancel.setText("  Cancel");
      btnCancel.setEnabled(false);
      btnDelete.setEnabled(false);
    }
    else {
      btnAddOrEdit.setIcon(new ImageIcon(getClass().getResource("/Resources/edit.png"))); // NOI18N
      btnAddOrEdit.setText("  Edit");
      btnAddOrEdit.setEnabled(true);
      btnCancel.setText("  Unselect");
      btnCancel.setEnabled(true);
      btnDelete.setEnabled(true);
    }
  }
  
  private void resetTheForm() {
    txtPosition.setText("");
    txtPosition.setEnabled(false);
    btnAddOrEdit.setIcon(new ImageIcon(getClass().getResource("/Resources/add.png"))); // NOI18N
    btnAddOrEdit.setText("  Add");
    btnAddOrEdit.setEnabled(true);
    btnSave.setEnabled(false);
    btnDelete.setEnabled(false);
    btnCancel.setText("  Cancel");
    btnCancel.setEnabled(false);
    jTable1.setEnabled(true);
  }
  
  private void adjustColumnWidths() {
    JTableHeader headers = jTable1.getTableHeader();
    headers.setForeground(Color.BLUE);
    
    TableColumn idColumn = jTable1.getColumnModel().getColumn(0);
    idColumn.setPreferredWidth(50);
    
    TableColumn positionColumn = jTable1.getColumnModel().getColumn(1);
    positionColumn.setPreferredWidth(250);
    
  }
}

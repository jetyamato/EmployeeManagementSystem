/*
 * The MIT License
 *
 * Copyright 2023 JOSEPH EMMANUEL F. TAMAYO.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package Forms;

import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.GroupLayout;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.WindowConstants;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import java.time.format.DateTimeFormatter;

import EmployeeManagementSystem.DependencyInjector;
import java.awt.Color;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author josep
 */
public final class List extends JInternalFrame {

  private final DependencyInjector di = DependencyInjector.getInstance();
  private ArrayList<Data.Objects.Employees> employeesList = di.employeesFacade().getEmployeesList();
  private ArrayList<Data.Objects.Departments> departmentsList = di.departmentsFacade().getDepartmentsList();
  private ArrayList<Data.Objects.Positions> positionsList = di.positionsFacade().getPositionsList();
  
  /**
   * Creates new form Positions
   */
  public List() {
    initComponents();
    refreshTableContents();
    
    TableModel model = jTable1.getModel();
    TableRowSorter sorter = new TableRowSorter(model);
    jTable1.setRowSorter(sorter);
    
    txtSearch.getDocument().addDocumentListener(new DocumentListener() {
      
      @Override
      public void insertUpdate(DocumentEvent evt) {
        search(txtSearch.getText());
      }
      
      @Override
      public void removeUpdate(DocumentEvent evt) {
        search(txtSearch.getText());
      }
      
      @Override
      public void changedUpdate(DocumentEvent evt) {
        search(txtSearch.getText());
      }
      
      public void search(String searchString) {
        if (searchString.length() == 0) sorter.setRowFilter(null);
        else sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchString));
      }
      
    });
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new JScrollPane();
    jTable1 = new JTable();
    jLabel1 = new JLabel();
    txtSearch = new JTextField();
    lblCount = new JLabel();

    setClosable(true);
    setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    setIconifiable(true);
    setTitle("List of Employees");
    setVisible(true);
    addInternalFrameListener(new InternalFrameListener() {
      public void internalFrameActivated(InternalFrameEvent evt) {
      }
      public void internalFrameClosed(InternalFrameEvent evt) {
      }
      public void internalFrameClosing(InternalFrameEvent evt) {
        formInternalFrameClosing(evt);
      }
      public void internalFrameDeactivated(InternalFrameEvent evt) {
      }
      public void internalFrameDeiconified(InternalFrameEvent evt) {
        formInternalFrameDeiconified(evt);
      }
      public void internalFrameIconified(InternalFrameEvent evt) {
      }
      public void internalFrameOpened(InternalFrameEvent evt) {
      }
    });

    jTable1.setModel(new DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "ID", "Employee ID", "Name", "Birthday", "Contact Number", "Department", "Position"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false, false, false, false, false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(jTable1);

    jLabel1.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
    jLabel1.setText("Search:");

    txtSearch.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

    lblCount.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
    lblCount.setText("Records Found: 0");

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(21, 21, 21)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(lblCount, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(256, 256, 256))
          .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
              .addComponent(jScrollPane1, GroupLayout.Alignment.LEADING)
              .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtSearch, GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addGap(569, 569, 569)))
            .addGap(21, 21, 21))))
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(21, 21, 21)
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(txtSearch, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addGap(18, 18, 18)
        .addComponent(lblCount)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        .addGap(21, 21, 21))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void formInternalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeiconified
    
    Dimension desktopSize = this.getParent().getSize();
    Dimension internalFrameSize = this.getSize();

    this.setLocation(
      (desktopSize.width - internalFrameSize.width) / 2,
      (desktopSize.height - internalFrameSize.height) / 2
    );
  }//GEN-LAST:event_formInternalFrameDeiconified

  private void formInternalFrameClosing(InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
    resetTheForm();
    refreshTableContents();
  }//GEN-LAST:event_formInternalFrameClosing


  // Variables declaration - do not modify//GEN-BEGIN:variables
  JLabel jLabel1;
  JScrollPane jScrollPane1;
  JTable jTable1;
  JLabel lblCount;
  JTextField txtSearch;
  // End of variables declaration//GEN-END:variables

  private void refreshData() {
    departmentsList = di.departmentsFacade().getDepartmentsList();
    positionsList = di.positionsFacade().getPositionsList();
    employeesList = di.employeesFacade().getEmployeesList();
  }
  
  private void refreshTableContents() {
    refreshData();
    
    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
    
    model.setRowCount(0);
    
    int count = 0;
    
    for (Data.Objects.Employees p : this.employeesList) {
      String department = null, position = null;
      
      for (int i = 0; i < departmentsList.size(); i++) {
        Data.Objects.Departments currentDepartment = departmentsList.get(i);
        
        if (p.getDepartmentId() == currentDepartment.getId()) department = currentDepartment.getDepartmentName();
      }
      
      for (int i = 0; i < positionsList.size(); i++) {
        Data.Objects.Positions currentPosition = positionsList.get(i);
        
        if (p.getPositionId() == currentPosition.getId()) position = currentPosition.getPositionName();
      }
      
      model.addRow(
        new Object[] {
          p.getId(),
          p.getEmployeeId(),
          p.getFirstName() + " " + p.getLastName(),
          p.getDateOfBirth().format(DateTimeFormatter.ofPattern("MMMM dd, yyyy")),
          p.getContactNumber(),
          department,
          position
        }
      );
      ++count;
    }
    
    lblCount.setText("Records Found: " + count);
    
    adjustColumnWidths();
  }
  
  private void resetTheForm() {
    txtSearch.setText("");
  }
  
  private void adjustColumnWidths() {
    JTableHeader headers = jTable1.getTableHeader();
    headers.setForeground(Color.BLUE);
    
    TableColumn idColumn = jTable1.getColumnModel().getColumn(0);
    idColumn.setPreferredWidth(50);
    
    TableColumn employeeIdColumn = jTable1.getColumnModel().getColumn(1);
    employeeIdColumn.setPreferredWidth(150);
    
    TableColumn nameColumn = jTable1.getColumnModel().getColumn(2);
    nameColumn.setPreferredWidth(150);
    
    TableColumn birthdayColumn = jTable1.getColumnModel().getColumn(3);
    birthdayColumn.setPreferredWidth(100);
    
    TableColumn contactNumberColumn = jTable1.getColumnModel().getColumn(4);
    contactNumberColumn.setPreferredWidth(100);
    
    TableColumn departmentColumn = jTable1.getColumnModel().getColumn(5);
    departmentColumn.setPreferredWidth(200);
    
    TableColumn positionColumn = jTable1.getColumnModel().getColumn(6);
    positionColumn.setPreferredWidth(100);
    
  }

}
